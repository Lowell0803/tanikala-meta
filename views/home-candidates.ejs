<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>TANIKALA Voting System</title>

    <link rel="stylesheet" type="text/css" href="css/index.css" />
    <link rel="stylesheet" href="components/notification.css" />
    <!-- <link rel="stylesheet" type="text/css" href="css/candidates.css" /> -->
    <!-- <link rel="stylesheet" type="text/css" href="admin/css/candidates.css" /> -->
    <!-- <link rel="stylesheet" type="text/css" href="admin/css/index-admin.css" /> -->
    <!-- <link rel="stylesheet" type="text/css" href="admin/css/index-election.css" /> -->
    <link rel="stylesheet" type="text/css" href="css/home-candidates.css" /> 

    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&family=Poppins:wght@400;700&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />

    
  </head>
  <body>
    <header class="header">
      <div class="header-logo">
        <img src="img/logo_tanikala.png" alt="Tanikala Voting System" />
      </div>
      <nav class="header-nav">
        <ul class="header-nav-content">
          <li><a href="/">Home</a></li>
          <li><a href="/home-candidates" id="active-link">Candidates</a></li>
          <li><a href="/about">About</a></li>
          <li><a href="/contact">Contact</a></li>
        </ul>
      </nav>
      <div class="header-bottom-line"></div>
    </header>

    <div class="content">

      
      <link rel="stylesheet" type="text/css" href="/components/popup-vote.css" />

      <!-- add mo to zari -->
      <script src="/components/popup.js"></script>

    
      <div class="content-title">
        <h3>BLOCKCHAIN-BASED VOTING SYSTEM FOR THE STUDENT GOVERNMENT ELECTIONS AT BULACAN STATE UNIVERSITY</h3>
      </div>

      <div class="content-main">
        
        <div class="first-main">
          <div class="main-content">
            <div class="main-left">
              <h1 class="ssc">Supreme Student Council</h1>

              <div class="container container-ssc box-shadow" id="container-president">
                <div class="container-position">
                  <h1 class="position-ssc">President</h1>
                </div>
                <!-- <hr /> -->
                <div>
                  <% candidates.filter(candidate=> candidate._id.startsWith('president_')) .forEach((president, index) => { %>
                  <br />
                  <div class="candidate">
                    <% if (president._id) { %>
                    <!-- <div class="candidate-content"> -->
                      <div class="img-container">
                        <img src="<%= president.image %>" alt="<%= president.name %>" />
                      </div>

                      <div class="candidate-info">
                        <h2 class="text-name"><%= president.name %></h2>
                        <p class="text-party">Party: <%= president.party %></p>
                        <p class="text-moreInfo"><%= president.moreInfo %> </p>
                      </div>
                    <!-- </div> -->

                    <% } else { %>
                    <p>There are no candidates for <%= president.position %> position right now.</p>
                    <% } %>
                  </div>
                  <% }); %>
                </div>
              </div>

              <div class="container container-ssc box-shadow" id="container-vice-president">
                <div class="container-position">
                  <h1 class="position-ssc">Vice President</h1>
                 
                </div>
                <!-- <hr /> -->
                <div>
                  <% candidates.filter(candidate=> candidate._id.startsWith('vice_president_')) .forEach((vice_president, index) => { %>
                  <br />
                  <div class="candidate">
                    <% if (vice_president._id) { %>
                  
                      <div class="img-container">
                        <img src="<%= vice_president.image %>" alt="<%= vice_president.name %>" />
                      </div>

                      <div class="candidate-info">
                        <h2 class="text-name"><%= vice_president.name %></h2>
                        <p class="text-party">Party: <%= vice_president.party %></p>
                        <p class="text-moreInfo"><%= vice_president.moreInfo %></p>
                      </div>
                   

                    
                    <% } else { %>
                    <p>There are no candidates for the <%= president.position %> position right now.</p>
                    <% } %>
                  </div>
                  <% }); %>
                </div>
              </div>

              <div class="container container-ssc box-shadow" id="container-senators">
                <div class="container-position">
                  <h1 class="position-ssc">Senators</h1>
                 
                </div>
                <!-- <hr /> -->
                <div>
                  <% candidates.filter(candidate=> candidate._id.startsWith('senator_')) .forEach((senator, index) => { %>
                  <br />
                  <div class="candidate">
                    <% if (senator._id) { %>
                    
                      <div class="img-container">
                        <img src="<%= senator.image %>" alt="<%= senator.name %>" />
                      </div>

                      <div class="candidate-info">
                        <h2 class="text-name"><%= senator.name %></h2>
                        <p class="text-party">Party: <%= senator.party %></p>
                        <p class="text-moreInfo"><%= senator.moreInfo %></p>
                      </div>
                    

                  
                    <% } else { %>
                    <p>There are no candidates for <%= senator.position %> position right now.</p>
                    <% } %>
                  </div>
                  <% }); %>
                </div>
              </div>
            </div>
            <div class="main-right">
              <div class="main-right-header">
                <h1 class="lsc">Local Student Council</h1>
                <br />

                <select class="select" id="collegeSelect">
                  <option value="CAFA">College of Architecture and Fine Arts (CAFA)</option>
                  <option value="CAL">College of Arts and Letters (CAL)</option>
                  <option value="CBEA">College of Business Education and Accountancy (CBEA)</option>
                  <option value="CCJE">College of Criminal Justice Education (CCJE)</option>
                  <option value="CHTM">College of Hospitality and Tourism Management (CHTM)</option>
                  <option value="CIT">College of Industrial Technology (CIT)</option>
                  <option value="CICT">College of Information and Communications Technology (CICT)</option>
                  <option value="COE">College of Engineering (COE)</option>
                  <option value="COED">College of Education (COED)</option>
                  <option value="CN">College of Nursing (CN)</option>
                  <option value="CS">College of Science (CS)</option>
                  <option value="CSER">College of Sports, Exercise and Recreation (CSER)</option>
                  <option value="CSSP">College of Social Sciences and Philosophy (CSSP)</option>
                </select>
                <br />
                <br />
                <!-- <input type="text" id="collegeInput" /> -->
              </div>
              <div class="all-lsc">
                <div class="container container-lsc box-shadow" id="container-lsc-governor">
                  <div class="container-position">
                    <h1 class="position-lsc">Governor</h1>
                 
                  </div>
                  <!-- <hr /> -->
                  <br />
                  <div>
                    <% candidates_lsc.forEach(college => { %> <% if (college.collegeAcronym === "CAFA" && college.positions["Governor"]) { %> <% college.positions["Governor"].forEach((candidate, index) => { %>
                    <br />
                    <div class="candidate">
                      <% if (candidate._id) { %>
                      
                        <div class="img-container">
                          <img src="<%= candidate.image %>" alt="<%= candidate.name %>" />
                        </div>
                        <div class="candidate-info">
                          <h2><%= candidate.name %></h2>
                          <p>Party: <%= candidate.party %></p>
                        </div>
                      

                      <% } %>
                    </div>
                    <% }) %> <% } %> <% }) %>
                  </div>
                </div>

                <div class="container container-lsc box-shadow" id="container-lsc-vice-governor">
                  <h2>Vice Governor</h2>
                 
                  <br />
                  <% candidates_lsc.forEach(college => { %> <% if (college.collegeAcronym === "CAFA") { %> <% if (college.positions["Vice Governor"]) { %> <% college.positions["Vice Governor"].forEach(candidate => { %>
                  
                    <div class="candidate">
                  
                    <img src="<%= candidate.image %>" alt="<%= candidate.name %>" />
                   
                   
                    <h3><%= candidate.name %></h3>
                    <p>Party: <%= candidate.party %></p>
                    
                    <p><%= candidate.moreInfo %></p>
                  </div>
                  <% }); %> <% } %> <% } %> <% }); %>
                </div>
                <!-- Board Member Container -->
                <% const boardMembersAll = candidates.filter(candidate => candidate.position === 'board member' && candidate.college && candidate.program); const boardMembersNonAbstain = boardMembersAll.filter(candidate => candidate.name !== 'Abstain'); const boardMembersAbstain = boardMembersAll.filter(candidate => candidate.name === 'Abstain'); const totalVotesBoardMember = boardMembersNonAbstain.reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); let boardMembersByProgram
                = {}; boardMembersNonAbstain.forEach(candidate => { if (!boardMembersByProgram[candidate.program]) { boardMembersByProgram[candidate.program] = []; } boardMembersByProgram[candidate.program].push(candidate); }); Object.keys(boardMembersByProgram).forEach(program => { boardMembersByProgram[program].sort((a, b) => Number(b.voteCount) - Number(a.voteCount)); }); let abstainByProgram = {}; boardMembersAbstain.forEach(candidate => { if (!abstainByProgram[candidate.program]) {
                abstainByProgram[candidate.program] = []; } abstainByProgram[candidate.program].push(candidate); }); %>

                <div class="container-lsc box-shadow" id="container-lsc-board-member">
                  <div class="container-position">
                    <h1 class="position-lsc">Board Members</h1>
                  </div>
                  <!-- <hr /> -->

                  <% Object.keys(boardMembersByProgram).forEach(program => { let programTotalVotes = boardMembersByProgram[program].reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); if (abstainByProgram[program]) { programTotalVotes += abstainByProgram[program].reduce((acc, candidate) => acc + (Number(candidate.voteCount) || 0), 0); } %>
                  <!-- Wrap each program in its own container, adding an id based on college -->
                  <div class="program-group" id="college-<%= boardMembersByProgram[program][0].college %>">
                    <br />
                    <h2 class="program-header">
           
                        <%= program %>
     
                    </h2>
             
                     <br />
                  
                    <br />

                    <% boardMembersByProgram[program].forEach(candidate => { const voteCount = Number(candidate.voteCount) || 0; const percentage = programTotalVotes > 0 ? ((voteCount / programTotalVotes) * 100).toFixed(2) : 0; %>
                    <div class="" data-college="<%= candidate.college %>" data-program="<%= candidate.program %>">
                      <div class="candidate">
                        <div class="img-container">
                          <img src="<%= candidate.image %>" alt="<%= candidate.name %>" />
                        </div>
                        <div class="candidate-info">
                          <h2><%= candidate.name %></h2>
                          <p><%= candidate.party %></p>
                          <div class="row">
                            <div class="progress-bar">
                              <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                            </div>
                            <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                          </div>
                        </div>
                      </div>
                    </div>
                    <% }); %> <% if (abstainByProgram[program]) { abstainByProgram[program].forEach(candidate => { const voteCount = Number(candidate.voteCount) || 0; const percentage = programTotalVotes > 0 ? ((voteCount / programTotalVotes) * 100).toFixed(2) : 0; %>
                    <div class="candidate lsc-candidate" data-college="<%= candidate.college %>" data-program="<%= candidate.program %>">
                      <div class="candidate">
                        <div class="img-container">
                          <h2><%= candidate.name %></h2>
                        </div>
                        <div class="candidate-info">
                          <div class="row">
                            <div class="progress-bar">
                              <div class="progress" data-target="<%= percentage %>%" style="width: 0"><%= voteCount %> votes</div>
                            </div>
                            <p>&nbsp;&nbsp;&nbsp;&nbsp;<%= percentage %>%</p>
                          </div>
                        </div>
                      </div>
                    </div>
                    <% }); } %>
                    <h3 class="right">
                      <span><u><%= programTotalVotes %></u></span> total votes cast
                    </h3>
                  </div>
                  <% }); %>
                </div>
              </div>
            </div>
          </div>
        </div>
        
      </div> <!-- content-main -->
    </div> <!-- .content -->

    <script>
      // Set the default selection to CAFA on page load
      window.onload = function () {
        const select = document.getElementById("collegeSelect");
        const input = document.getElementById("collegeInput");

        // Set the default value of the input to the selected option (CAFA)
        input.value = select.options[select.selectedIndex].text;

        // Listen for any changes in the select element and update the input
        select.addEventListener("change", function () {
          input.value = select.options[select.selectedIndex].text;
        });
      };

      function editCandidateLSC(id, position, party, name, moreInfo, image, collegeAcronym, program = "") {
        let form_id = "form-edit-lsc";
        toggleForm(form_id);

        let headingPosition = document.getElementById("heading-position-edit-lsc");
        let profileImage = document.getElementById("image-edit-lsc");
        let inputId = document.getElementById("candidate-id-edit-lsc");
        let inputPosition = document.getElementById("position-edit-lsc");
        let inputName = document.getElementById("name-edit-lsc");
        let inputParty = document.getElementById("party-edit-lsc");
        let inputMoreInfo = document.getElementById("more-info-edit-lsc");
        let inputCollegeAcronym = document.getElementById("college-acronym-edit-lsc");
        let inputProgram = document.getElementById("program-edit-lsc");
        let hiddenOriginalImage = document.getElementById("original-image-edit-lsc");

        console.log("Editing candidate:", { id, position, party, name, moreInfo, collegeAcronym, program });

        headingPosition.innerHTML = position + (program ? ` - ${program}` : ""); // Show program for Board Members
        inputName.value = name;

        // Capitalize first letter of each word
        function capitalize(str) {
          return str
            .split(" ") // Split into words
            .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()) // Capitalize first letter of each word
            .join(" "); // Join the words back into a string
        }

        inputPosition.value = capitalize(position);
        inputParty.value = party;
        inputId.value = id;
        inputMoreInfo.value = moreInfo;
        inputCollegeAcronym.value = collegeAcronym; // Fix: Assign correct value
        inputProgram.value = program; // Fix: Assign correct program if Board Member

        if (image && image !== "image") {
          profileImage.src = image;
          hiddenOriginalImage.value = image;
        } else if (hiddenOriginalImage.value) {
          profileImage.src = hiddenOriginalImage.value;
        } else {
          profileImage.src = "img/placeholder_admin_profile.png";
        }
      }

      function addCandidateLSC(position, program = "") {
  let formId = "form-add-lsc";
  toggleForm(formId); // Show form before setting values

  // Update the heading to include the program if provided
  let headingPosition = document.getElementById("heading-position-add-lsc");
  headingPosition.innerHTML = position + (program ? ' - ' + program : '');

  let selectedCollege = document.getElementById("collegeSelect");
  let inputCollege = document.getElementById("college-acronym-add-lsc");
  let inputPosition = document.getElementById("position-add-lsc");
  let inputProgram = document.getElementById("program-add-lsc");
  let inputCandidateId = document.getElementById("candidate-id-add-lsc");

  // Ensure all elements exist before using them
  if (!selectedCollege || !inputCollege || !inputPosition || !inputCandidateId) {
    console.error("⚠️ Missing form elements! Check IDs in the HTML.");
    return;
  }

  // Set values dynamically
  inputCollege.value = selectedCollege.value;
  inputPosition.value = position;
  inputProgram.value = program || "";

  // Fetch candidates to determine next ID (if needed)
  fetch(`/api/candidates-lsc?position=${encodeURIComponent(position)}&college=${selectedCollege.value}${program ? `&program=${encodeURIComponent(program)}` : ""}`)
    .then((response) => response.json())
    .then((data) => {
      if (data.error) {
        console.warn("API Error:", data.error);
        return;
      }
      let maxId = 0;
      data.candidates.forEach((candidate) => {
        const match = candidate._id.match(/_(\d+)$/);
        if (match) {
          const num = parseInt(match[1], 10);
          if (num > maxId) {
            maxId = num;
          }
        }
      });
      // Generate new candidate ID dynamically
      inputCandidateId.value = `${position.toLowerCase().replace(" ", "_")}_${maxId + 1}`;
    })
    .catch((error) => console.error("Error fetching candidates:", error));
}

      async function deleteCandidateLSC() {
        let candidateId = document.getElementById("candidate-id-edit-lsc").value;
        let candidatePosition = document.getElementById("position-edit-lsc").value;
        let candidateCollege = document.getElementById("college-acronym-edit-lsc").value;
        let candidateProgram = document.getElementById("program-edit-lsc").value; // Only relevant for Board Members

        if (!candidateId) {
          alert("No candidate selected for deletion.");
          return;
        }

        if (!confirm("Are you sure you want to delete this candidate?")) {
          return;
        }

        try {
          const response = await fetch("/delete-candidate-lsc", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              _id: candidateId,
              candidatePosition: candidatePosition,
              collegeAcronym: candidateCollege,
              program: candidateProgram,
            }),
          });

          if (response.ok) {
            alert("Candidate deleted successfully.");
            window.location.reload(); // Refresh the page to update the UI
          } else {
            const errorMessage = await response.text();
            alert("Failed to delete candidate: " + errorMessage);
          }
        } catch (error) {
          console.error("Error deleting candidate:", error);
          alert("An error occurred while deleting the candidate.");
        }
      }
    </script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const selectCollege = document.getElementById("collegeSelect");
    const governorContainer = document.getElementById("container-lsc-governor");
    const viceGovernorContainer = document.getElementById("container-lsc-vice-governor");
    const boardMemberContainer = document.getElementById("container-lsc-board-member");

    selectCollege.addEventListener("change", function () {
      updateLSCCandidates(selectCollege.value);
      console.log("Test");
    });

    async function updateLSCCandidates(collegeAcronym) {
      try {
        const response = await fetch(`/api/lsc-candidates?college=${collegeAcronym}`);
        const data = await response.json();

        if (data.error) {
          console.warn("API Error:", data.error);
          return;
        }

        // Governor Section
        governorContainer.innerHTML = `<h1 class="position-lsc">Governor</h1>
      
      <div>${data.governor.length ? data.governor.map((candidate) => createCandidateCard(candidate, collegeAcronym)).join("") : "<p>No candidates found.</p>"}</div>
 `;

        // Vice Governor Section
        viceGovernorContainer.innerHTML = `<h1 class="position-lsc">Vice Governor</h1>
      
      <div>${data.viceGovernor.length ? data.viceGovernor.map((candidate) => createCandidateCard(candidate, collegeAcronym)).join("") : "<p>No candidates found.</p>"}</div>`;

        // Board Members Section - Updated
        if (data.boardMembers.length) {
          // Group board members by program
          const boardMembersByProgram = {};
          data.boardMembers.forEach((candidate) => {
            if (!boardMembersByProgram[candidate.program]) {
              boardMembersByProgram[candidate.program] = [];
            }
            boardMembersByProgram[candidate.program].push(candidate);
          });

          // Build the HTML for each program group
          let boardMembersHTML = "<h1 class=\"position-lsc\">Board Members</h1>";
          for (let program in boardMembersByProgram) {
            boardMembersHTML += `
          <div class="program-group" id="college-${collegeAcronym}-${program}">
            <h2 class="program-header">${program}</h2>
            
            <div class="program-group-candidates">
              ${boardMembersByProgram[program].map((candidate) => createBoardMemberCard(candidate, collegeAcronym)).join("")}
            </div>
          </div>
        `;
          }
          boardMemberContainer.innerHTML = boardMembersHTML;
        } else {
          boardMemberContainer.innerHTML = "<h1 class=\"position-lsc\">Board Members</h1><p>No board members found.</p>";
        }
      } catch (error) {
        console.error("Error fetching LSC candidates:", error);
      }
    }

    function createCandidateCard(candidate, collegeAcronym) {
      return `
    <div class="candidate">

        <div class="img-container">
          <img src="${candidate.image}" alt="${candidate.name}">
        </div>
        <div class="candidate-info">
          <h2 class="text-name">${candidate.name}</h2>
          <p class="text-party">Party: ${candidate.party}</p>
          <p class="text-moreInfo">${candidate.moreInfo}</p>
        </div>

     
    </div>`;
    }

    function createBoardMemberCard(candidate, collegeAcronym) {
      return `
    <div class="candidate">
      <div class="img-container">
        <img src="${candidate.image}" alt="${candidate.name}">
      </div>
      <div class="candidate-info">
        <h2 class="text-name">${candidate.name}</h2>
        <p class="text-party">Party: ${candidate.party}</p>
        <p class="text-moreInfo">${candidate.moreInfo}</p>
       
      </div>
      
    </div>`;
    }

    // Load default selection on first page load
    updateLSCCandidates(selectCollege.value);
  });
</script>

      <%- include('homepages/footer') %>          
  </body>
</html>
